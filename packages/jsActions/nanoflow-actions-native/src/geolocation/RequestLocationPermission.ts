// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the code between BEGIN USER CODE and END USER CODE
// Other code you write will be lost the next time you deploy the project.

import { PermissionsAndroid, Platform, NativeModules, Linking, Alert, ToastAndroid } from "react-native";
import Geolocation, { GeolocationStatic } from "@react-native-community/geolocation";
import type { GeolocationServiceStatic, AuthorizationResult } from "../../typings/Geolocation";

/**
 * On the native platform a request for permission should be made before the `GetCurrentLocation` action would work.
 * @returns {Promise.<boolean>}
 */
export async function RequestLocationPermission(): Promise<boolean> {
    // BEGIN USER CODE

    let geolocationModule: Geolocation | GeolocationStatic | GeolocationServiceStatic;

    if (navigator && navigator.product === "ReactNative") {
        if (NativeModules.RNFusedLocation) {
            const geolocationService = await import("react-native-geolocation-service");
            geolocationModule = geolocationService.default;
        } else if (NativeModules.RNCGeolocation) {
            geolocationModule = Geolocation;
        } else {
            return Promise.reject(new Error("Geolocation module could not be found"));
        }
    } else if (navigator && navigator.geolocation) {
        geolocationModule = navigator.geolocation;
    } else {
        return Promise.reject(new Error("Geolocation module could not be found"));
    }

    const hasPermissionIOS = async (): Promise<boolean> => {
        const openSetting = (): void => {
            Linking.openSettings().catch(() => {
                Alert.alert("Unable to open settings.");
            });
        };

        return (geolocationModule as GeolocationServiceStatic)
            .requestAuthorization("whenInUse")
            .then((status: AuthorizationResult) => {
                if (status === "granted") {
                    return true;
                }

                if (status === "denied") {
                    Alert.alert("Location permission denied.");
                }

                if (status === "disabled") {
                    Alert.alert("Location Services must be enabled to determine your location.", "", [
                        { text: "Go to Settings", onPress: openSetting },
                        {
                            text: "Don't Use Location"
                        }
                    ]);
                }

                return false;
            });
    };

    const hasPermissionAndroid = async (): Promise<boolean> => {
        if (Platform.Version < 23) {
            return true;
        }

        const androidLocationPermission = PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION;

        return PermissionsAndroid.check(androidLocationPermission).then(hasPermission =>
            hasPermission
                ? true
                : PermissionsAndroid.request(androidLocationPermission).then(status => {
                      if (status === PermissionsAndroid.RESULTS.GRANTED) {
                          return true;
                      }

                      if (status === PermissionsAndroid.RESULTS.DENIED) {
                          ToastAndroid.show("Location permission denied by user.", ToastAndroid.LONG);
                      } else if (status === PermissionsAndroid.RESULTS.NEVER_ASK_AGAIN) {
                          ToastAndroid.show("Location permission revoked by user.", ToastAndroid.LONG);
                      }

                      return false;
                  })
        );
    };

    const hasLocationPermission = async (): Promise<boolean> => {
        if (Platform.OS === "ios") {
            const hasPermission = await hasPermissionIOS();
            return hasPermission;
        }

        if (Platform.OS === "android") {
            const hasPermission = await hasPermissionAndroid();
            return hasPermission;
        }

        return Promise.reject(new Error("Unsupported platform"));
    };

    const hasLocationPermissionForOldLibrary = async (): Promise<boolean> => {
        if (Platform.OS === "android") {
            const locationPermission = PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION;

            return PermissionsAndroid.check(locationPermission).then(hasPermission =>
                hasPermission
                    ? true
                    : PermissionsAndroid.request(locationPermission).then(
                          status => status === PermissionsAndroid.RESULTS.GRANTED
                      )
            );
        } else if (geolocationModule && (geolocationModule as GeolocationStatic).requestAuthorization) {
            try {
                (geolocationModule as GeolocationStatic).requestAuthorization();
                return Promise.resolve(true);
            } catch (error) {
                return Promise.reject(error);
            }
        }

        return false;
    };

    if (navigator && navigator.product === "ReactNative") {
        if (NativeModules.RNFusedLocation) {
            return hasLocationPermission();
        } else if (NativeModules.RNCGeolocation) {
            return hasLocationPermissionForOldLibrary();
        } else {
            return Promise.reject(new Error("Geolocation module could not be found"));
        }
    }

    return Promise.reject(new Error("No permission request for location is required for web/hybrid platform"));

    // END USER CODE
}
